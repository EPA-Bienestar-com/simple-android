buildscript {
  ext.versions = [
      minSdk              : 21,
      compileSdk          : 29,
      kotlin              : '1.3.61',
      supportLib          : '1.0.0',
      recyclerView        : '1.0.0',
      material            : '1.0.0',
      cardview            : '1.0.0',
      room                : '2.1.0',
      supportTest         : '1.1.1',
      timber              : '4.7.0',
      dagger              : '2.24',
      butterKnife         : '8.8.1',
      kotterKnife         : 'e157638df1',
      coreTesting         : '2.0.0',
      moshi               : '1.8.0',
      retrofit            : '2.4.0',
      sentry              : '1.7.22',
      slf4j               : '1.7.25',
      groupie             : '2.3.0',
      flow                : '1.0.0-alpha3',
      rxJava              : '2.2.16',
      rxAndroid           : '2.1.1',
      rxBinding           : '2.1.1',
      rxBinding3          : '3.1.0',
      rxKotlin            : '2.4.0',
      rxPreference        : '2.0.0',
      qrReader            : '2.1.2',
      jcabiXml            : '0.21.4',
      threeTenBp          : '1.3.6',
      lazyThreeTenBp      : '0.3.0',
      okLoggingInterceptor: '3.10.0',
      traceur             : '2.2.12',
      maskedEditText      : '1.0.5',
      itemAnimators       : '1.0.2',
      jbcrypt             : '0.3m',
      workManager         : '2.2.0',
      faker               : '1.2.7',
      truth               : '1.0',
      junit               : '4.12',
      mockito             : '2.18.3',
      mockitoKotlin       : '1.5.0',
      junitParams         : '1.1.1',
      sqliteAndroid       : '3.24.0',
      playServicesAuth    : '16.0.1',
      playServicesVision  : '16.2.0',
      viewPump            : '2.0.3',
      pinEntryEditText    : '2.0.6',
      fbShimmer           : '0.3.0',
      javaStringSimilarity: '1.1.0',
      leakCanary          : '2.1',
      constraintLayout    : '1.1.3',
      playServicesLocation: '16.0.0',
      codeScanner         : '2.1.0',
      firebaseConfig      : '19.1.0',
      googleServices      : '4.3.3',
      playCore            : '1.6.1',
      fastScroll          : '2.0.0',
      flexbox             : '1.1.0',
      mixpanel            : '5.6.4',
      mobius              : '1.3.0',
      guava               : '28.1-jre', // Used by the 'mobius-migration' library ONLY in tests
      uuidGenerator       : '3.2.0',
      assistedInject      : '0.5.2',
      flipper             : '0.30.1',
      soloader            : '0.5.1',
      asm                 : '7.2',
      ktlint              : '0.36.0'
  ]

  repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    classpath "io.sentry:sentry-android-gradle-plugin:$versions.sentry"
    classpath "com.google.gms:google-services:$versions.googleServices"
  }
}

plugins {
  id "com.diffplug.gradle.spotless" version "3.27.0"
}

allprojects {
  repositories {
    google()
    mavenCentral()
    jcenter()
  }
}

subprojects {
  apply plugin: 'com.diffplug.gradle.spotless'

  // https://github.com/diffplug/spotless/tree/master/plugin-gradle
  spotless {
    lineEndings 'UNIX'

    kotlin {
      ktlint(versions.ktlint).userData([
        'indent_style'            : 'space',
        'indent_size'             : '2',
        'continuation_indent_size': '4'
      ])

      trimTrailingWhitespace()
      endWithNewline()
    }
  }
}

task cleanRoot(type: Delete) {
  delete rootProject.buildDir
}

task compileSpellfix(type: Copy, dependsOn: 'spellfix:externalNativeBuildRelease') {
  doLast {
    logger.lifecycle("Copied libspellfix native libs to app jniLibs!")
  }
  from 'libspellfix/build/intermediates/ndkBuild/release'
  into 'app/src/main/jniLibs'
  eachFile {
    if (!name.endsWith('.so')) {
      exclude()
    } else {
      def pathParts = it.path.split("/").reverse()
      // We expect the 0th item to be the native lib name and the 1st item to be the abi
      if (pathParts.length < 2) {
        logger.log(LogLevel.ERROR, "Unrecognized native lib path: $it.path")
        throw TaskExecutionException(this)
      }

      def libName = pathParts[0]
      def libAbi = pathParts[1]
      it.path = "$libAbi/$libName"
      logger.lifecycle("Copy native lib: $it.sourcePath to: $it.path")
    }
  }
  includeEmptyDirs false
}

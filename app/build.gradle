import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.sentry.android.gradle'

apply from: "../quality/install-git-hook.gradle"

repositories {
  maven { url 'https://jitpack.io' }
}

sentry {
  autoProguardConfig true
  // We can disable auto upload of proguard mappings since we use -dontobfuscate when running proguard
  autoUpload false
}

kapt {
  arguments {
    arg("room.schemaLocation", "$projectDir/schemas".toString())
  }
}

tasks.withType(Test) {
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT
    showExceptions true
    exceptionFormat TestExceptionFormat.FULL
    showCauses true
    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
      exceptionFormat TestExceptionFormat.FULL
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}

android {
  compileSdkVersion versions.compileSdk
  // Needed to switch NDK versions on the CI server since they have different
  // NDK versions on macOS and Linux environments. Gradle plugin 3.6+ requires
  // us to pin an NDK version if we package native libs.
  // https://developer.android.com/studio/releases/gradle-plugin#default-ndk-version
  //
  // Currently, this is only used for assembling the APK where the build process
  // strips debug symbols from the APK.
  ndkVersion androidNdkVersion

  defaultConfig {
    applicationId "org.simple.clinic"
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk
    versionCode 1
    versionName "0.1"
    multiDexEnabled true

    testInstrumentationRunner "org.simple.clinic.AndroidTestJUnitRunner"
    proguardFiles getDefaultProguardFile(defaultProguardFile), 'proguard-rules.pro'
  }

  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      minifyEnabled false
      useProguard false
      shrinkResources false
    }

    release {
      debuggable false
      if (runProguard.equalsIgnoreCase("true")) {
        minifyEnabled true
        shrinkResources true
        useProguard true
      } else {
        minifyEnabled false
        shrinkResources false
        useProguard false
      }
    }
  }

  flavorDimensions 'track'

  productFlavors {
    qa {
      dimension 'track'
      applicationIdSuffix ".qa"
      versionNameSuffix "-qa"
      buildConfigField "String", "MANIFEST_ENDPOINT", "\"" + qaManifestEndpoint + "\""
      buildConfigField "String", "FALLBACK_ENDPOINT", "\"" + qaFallbackApiEndpoint + "\""
      buildConfigField "String", "MIXPANEL_TOKEN", "\"" + qaMixpanelToken + "\""
      buildConfigField "boolean", "DISABLE_SCREENSHOT", "false"
    }

    staging {
      dimension 'track'
      applicationIdSuffix ".staging"
      versionNameSuffix "-demo"
      buildConfigField "String", "MANIFEST_ENDPOINT", "\"" + stagingManifestEndpoint + "\""
      buildConfigField "String", "FALLBACK_ENDPOINT", "\"" + stagingFallbackApiEndpoint + "\""
      buildConfigField "String", "MIXPANEL_TOKEN", "\"" + stagingMixpanelToken + "\""
      buildConfigField "boolean", "DISABLE_SCREENSHOT", "false"
    }

    sandbox {
      dimension 'track'
      applicationIdSuffix ".sandbox"
      versionNameSuffix "-sandbox"
      buildConfigField "String", "MANIFEST_ENDPOINT", "\"" + sandboxManifestEndpoint + "\""
      buildConfigField "String", "FALLBACK_ENDPOINT", "\"" + sandboxFallbackApiEndpoint + "\""
      buildConfigField "String", "MIXPANEL_TOKEN", "\"" + sandboxMixpanelToken + "\""
      buildConfigField "boolean", "DISABLE_SCREENSHOT", "false"
    }

    production {
      dimension 'track'
      buildConfigField "String", "MANIFEST_ENDPOINT", "\"" + productionManifestEndpoint + "\""
      buildConfigField "String", "FALLBACK_ENDPOINT", "\"" + productionFallbackApiEndpoint + "\""
      buildConfigField "String", "MIXPANEL_TOKEN", "\"" + productionMixpanelToken + "\""
      buildConfigField "boolean", "DISABLE_SCREENSHOT", "true"
    }

    security {
      dimension 'track'
      applicationIdSuffix ".security"
      versionNameSuffix "-security"
      buildConfigField "String", "MANIFEST_ENDPOINT", "\"" + securityManifestEndpoint + "\""
      buildConfigField "String", "FALLBACK_ENDPOINT", "\"" + securityFallbackApiEndpoint + "\""
      buildConfigField "String", "MIXPANEL_TOKEN", "\"" + securityMixpanelToken + "\""
      buildConfigField "boolean", "DISABLE_SCREENSHOT", "true"
    }
  }

  variantFilter { variant ->
    if (variant.name == "qaRelease" ||
        variant.name == "stagingDebug" ||
        variant.name == "sandboxDebug" ||
        variant.name == "productionDebug" ||
        variant.name == "securityDebug"
    ) {
      setIgnore(true)
    }
  }

  lintOptions {
    lintConfig file("$project.rootDir/quality/lint.xml")
    warningsAsErrors true
    abortOnError true
    checkReleaseBuilds false
  }

  compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
  }

  androidExtensions {
    experimental = true
  }

  sourceSets {
    def sharedTestDir = 'src/sharedTest/java'
    test {
      java.srcDirs += sharedTestDir
    }
    androidTest {
      assets.srcDirs += files("$projectDir/schemas".toString())
      java.srcDirs += sharedTestDir
    }
  }

  packagingOptions {
    // Deprecated ABIs. See https://developer.android.com/ndk/guides/abis
    exclude 'lib/mips/libsqlite3x.so'
    exclude 'lib/mips64/libsqlite3x.so'
    exclude 'lib/armeabi/libsqlite3x.so'
  }

  // We don't obfuscate (only minify) using proguard. Gradle plugin 3.2.0 (and greater?) generates
  // an empty mappings.txt file. This caused an issue where the CI deploy to play store task tries
  // to upload the empty mapping file, which causes the Play Store api to complain.
  task deleteProguardMappings(type: Delete) {
    delete fileTree(buildDir).matching {
      include "outputs/mapping/**/mapping.txt"
    }
  }

  afterEvaluate {
    tasks.findAll { it.name in ["assembleStagingRelease", "assembleSandboxRelease", "assembleProductionRelease", "assembleSecurityRelease"] }
        .forEach { it.finalizedBy deleteProguardMappings }
  }
}

dependencies {
  implementation project(path: ':router')

  testImplementation "junit:junit:$versions.junit"
  testImplementation "com.nhaarman:mockito-kotlin:$versions.mockitoKotlin"
  testImplementation "pl.pragmatists:JUnitParams:$versions.junitParams"
  testImplementation "com.google.truth:truth:$versions.truth"
  testImplementation "com.github.blocoio:faker:$versions.faker"

  androidTestImplementation "androidx.annotation:annotation:$versions.supportLib"
  androidTestImplementation "androidx.test:runner:$versions.supportTest"
  androidTestImplementation "androidx.test:rules:$versions.supportTest"
  androidTestImplementation "com.google.truth:truth:$versions.truth"
  androidTestImplementation "com.github.blocoio:faker:$versions.faker"
  androidTestImplementation "androidx.room:room-testing:$versions.room"
  androidTestImplementation ("androidx.arch.core:core-testing:$versions.coreTesting") {
    // This dependency transitively pulls in a newer version of Mockito than Mockito-Kotlin does.
    // This results in the import statements in the unit tests breaking for mockito methods because
    // the IDE uses the version of Mockito that is present in the classpath from the androidTest
    // sourceset dependency, which raises an inspection error in the IDE. We can explicitly exclude
    // it from this dependency because it is also pulled in via mockito-kotlin.
    exclude group: 'org.mockito', module: 'mockito-core'
  }
  kaptAndroidTest "com.google.dagger:dagger-compiler:$versions.dagger"

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
  testImplementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"

  implementation "androidx.appcompat:appcompat:$versions.supportLib"
  implementation "androidx.recyclerview:recyclerview:$versions.recyclerView"
  implementation "com.google.android.material:material:$versions.material"
  implementation "androidx.cardview:cardview:$versions.cardview"
  implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"
  implementation "androidx.room:room-runtime:$versions.room"
  kapt "androidx.room:room-compiler:$versions.room"
  implementation "androidx.room:room-rxjava2:$versions.room"
  implementation "com.google.android.gms:play-services-location:$versions.playServicesLocation"
  implementation "com.google.firebase:firebase-config:$versions.firebaseConfig"

  implementation "com.google.dagger:dagger:$versions.dagger"
  kapt "com.google.dagger:dagger-compiler:$versions.dagger"
  implementation("com.github.JakeWharton:kotterknife:$versions.kotterKnife") {
    exclude group: 'com.android.support'
  }
  implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
  implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
  implementation "com.jakewharton.rxbinding2:rxbinding:$versions.rxBinding"
  implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$versions.rxBinding"
  implementation "com.jakewharton.rxbinding3:rxbinding:$versions.rxBinding3"
  implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin"
  implementation "org.threeten:threetenbp:$versions.threeTenBp:no-tzdb"
  implementation "com.gabrielittner.threetenbp:lazythreetenbp:$versions.lazyThreeTenBp"
  implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
  implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit"
  implementation "com.squareup.retrofit2:converter-scalars:$versions.retrofit"
  implementation "com.squareup.okhttp3:logging-interceptor:$versions.okLoggingInterceptor"
  implementation "com.squareup.moshi:moshi:$versions.moshi"
  kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"
  implementation "com.squareup.moshi:moshi-adapters:$versions.moshi"
  implementation "com.f2prateek.rx.preferences2:rx-preferences:$versions.rxPreference"
  implementation "com.github.qoqa:Traceur:$versions.traceur"
  implementation "ru.egslava:MaskedEditText:$versions.maskedEditText"
  implementation "io.sentry:sentry-android:$versions.sentry"
  implementation("org.slf4j:slf4j-nop:$versions.slf4j") {
    because "sentry-android needs this dependency"
  }
  implementation "com.xwray:groupie:$versions.groupie"
  implementation "com.xwray:groupie-kotlin-android-extensions:$versions.groupie"
  implementation "com.mikepenz:itemanimators:$versions.itemAnimators@aar"
  implementation "org.mindrot:jbcrypt:$versions.jbcrypt"
  implementation "com.squareup.flow:flow:$versions.flow"
  implementation "io.requery:sqlite-android:$versions.sqliteAndroid"

  implementation "com.google.android.gms:play-services-auth:$versions.playServicesAuth"
  implementation "io.github.inflationx:viewpump:$versions.viewPump"
  implementation "com.facebook.shimmer:shimmer:$versions.fbShimmer"
  implementation "com.alimuzaffar.lib:pinentryedittext:$versions.pinEntryEditText"
  implementation "info.debatty:java-string-similarity:$versions.javaStringSimilarity"
  debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"

  implementation "com.budiyev.android:code-scanner:$versions.codeScanner"
  implementation "com.google.android.play:core:$versions.playCore"

  implementation "com.simplecityapps:recyclerview-fastscroll:$versions.fastScroll"
  implementation "com.google.android:flexbox:$versions.flexbox"
  implementation "com.mixpanel.android:mixpanel-android:$versions.mixpanel"

  implementation "androidx.work:work-runtime:$versions.workManager"
  implementation "androidx.work:work-gcm:$versions.workManager"

  implementation project(":mobius-base")
  testImplementation "com.spotify.mobius:mobius-test:$versions.mobius"
  testImplementation project(":mobius-migration")

  implementation "com.fasterxml.uuid:java-uuid-generator:$versions.uuidGenerator"
  implementation project(":simple-platform")
  implementation project(":simple-visuals")

  compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$versions.assistedInject"
  kapt "com.squareup.inject:assisted-inject-processor-dagger2:$versions.assistedInject"

  debugImplementation "com.facebook.flipper:flipper:$versions.flipper"
  debugImplementation "com.facebook.flipper:flipper-network-plugin:$versions.flipper"
  debugImplementation "com.facebook.soloader:soloader:$versions.soloader"

  testRuntimeOnly ("org.ow2.asm:asm:$versions.asm") {
    because "not mandatory, but Truth recommends adding this dependency for better error reporting"
  }
  androidTestRuntimeOnly ("org.ow2.asm:asm:$versions.asm") {
    because "not mandatory, but Truth recommends adding this dependency for better error reporting"
  }
}

// This must always be present at the bottom of this file, as per:
// https://console.firebase.google.com/u/2/project/simple-org/settings/general/
apply plugin: 'com.google.gms.google-services'
